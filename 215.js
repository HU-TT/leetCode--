/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
// var findKthLargest = function(nums, k) {
//   return nums.sort((a, b) => b - a)[k - 1]
// };

var findKthLargest = function(nums, k) {
  for (let i = k; i > 0; i--) {
    for (let j = 0, tmp; j < i; j++) {
      tmp = nums[j]
      if (tmp > nums[j + 1]) {
        nums[j] = nums[j + 1]
        nums[j + 1] = tmp
      }
    }
  }
  return nums[nums.length - k - 1]
};



// 8 0 [ 2, 3, 3, 1, 2, 4, 5, 5, 6 ]
// 8 1 [ 2, 3, 3, 1, 2, 4, 5, 5, 6 ]
// 8 2 [ 2, 3, 1, 3, 2, 4, 5, 5, 6 ]
// 8 3 [ 2, 3, 1, 2, 3, 4, 5, 5, 6 ]
// 8 4 [ 2, 3, 1, 2, 3, 4, 5, 5, 6 ]
// 8 5 [ 2, 3, 1, 2, 3, 4, 5, 5, 6 ]
// 8 6 [ 2, 3, 1, 2, 3, 4, 5, 5, 6 ]
// 8 7 [ 2, 3, 1, 2, 3, 4, 5, 5, 6 ]

// 7 0 [ 2, 3, 1, 2, 3, 4, 5, 5, 6 ]
// 7 1 [ 2, 1, 3, 2, 3, 4, 5, 5, 6 ]
// 7 2 [ 2, 1, 2, 3, 3, 4, 5, 5, 6 ]
// 7 3 [ 2, 1, 2, 3, 3, 4, 5, 5, 6 ]
// 7 4 [ 2, 1, 2, 3, 3, 4, 5, 5, 6 ]
// 7 5 [ 2, 1, 2, 3, 3, 4, 5, 5, 6 ]
// 7 6 [ 2, 1, 2, 3, 3, 4, 5, 5, 6 ]

// 6 0 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 6 1 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 6 2 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 6 3 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 6 4 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 6 5 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]

// 5 0 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 5 1 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 5 2 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 5 3 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 5 4 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]

// 4 0 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 4 1 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 4 2 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 4 3 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]

// 3 0 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 3 1 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 3 2 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]

// 2 0 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]
// 2 1 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]

// 1 0 [ 1, 2, 2, 3, 3, 4, 5, 5, 6 ]